public class LinkedListHeapSort {

    // Inner class Node
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Convert LinkedList to array
    static int[] toArray(Node head) {
        int size = 0;
        Node temp = head;
        while (temp != null) {
            size++;
            temp = temp.next;
        }

        int[] arr = new int[size];
        temp = head;
        int i = 0;
        while (temp != null) {
            arr[i++] = temp.data;
            temp = temp.next;
        }
        return arr;
    }

    // Heapify for heap sort
    static void heapify(int[] arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest])
            largest = left;

        if (right < n && arr[right] > arr[largest])
            largest = right;

        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            heapify(arr, n, largest);
        }
    }

    // HeapSort
    static void heapSort(int[] arr) {
        int n = arr.length;

        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        for (int i = n - 1; i >= 0; i--) {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            heapify(arr, i, 0);
        }
    }

    // Convert array to LinkedList
    static Node toLinkedList(int[] arr) {
        if (arr.length == 0) return null;
        Node head = new Node(arr[0]);
        Node curr = head;
        for (int i = 1; i < arr.length; i++) {
            curr.next = new Node(arr[i]);
            curr = curr.next;
        }
        return head;
    }

    // Main heap sort method
    static Node heapSortLinkedList(Node head) {
        int[] arr = toArray(head);
        heapSort(arr);
        return toLinkedList(arr);
    }

    // Print list
    static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data);
            if (head.next != null) System.out.print(" -> ");
            head = head.next;
        }
        System.out.println();
    }

    // Test
    public static void main(String[] args) {
        Node head = new Node(7);
        head.next = new Node(698147078);
        head.next.next = new Node(1123629290);
        head.next.next.next = new Node(1849873707);
        head.next.next.next.next = new Node(1608878378);
        head.next.next.next.next.next = new Node(140264035);
        head.next.next.next.next.next.next = new Node(-1206302000);

        System.out.println("Original List:");
        printList(head);

        head = heapSortLinkedList(head);

        System.out.println("Sorted List:");
        printList(head);
    }
}
